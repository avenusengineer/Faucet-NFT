@inherits BasicComponent

<RadzenDataList WrapItems="true" Data="@Data" TItem="CardListItem" >
    <Template Context="cardListItem">
        <RadzenCard class=@("box"
                            + (cardListItem.IsDisabled ? " box-disabled" : string.Empty)
                            + (SelectedItems != null && SelectedItems.Contains(cardListItem.Id)
                                ? (cardListItem.SelectionIcon == CardListItemSelectionIcon.Checkmark ? " box-checkmark" : " box-warning")
                                : string.Empty))
                    Style="width: 250px; position: relative;" onclick="@(async () => await ToggleSelection(cardListItem))"
                    ContextMenu="@(args => ShowContextMenu(args, cardListItem.ContextMenuButtons))">
            <div class="d-flex flex-row align-items-center">
                @if (SelectedItems != null && SelectedItems.Contains(cardListItem.Id))
                {
                    if (cardListItem.SelectionIcon == CardListItemSelectionIcon.Checkmark)
                    {
                        <CheckmarkIcon Style="position: absolute; top: 1em; right: 1em;"/>
                    }
                    else if (cardListItem.SelectionIcon == CardListItemSelectionIcon.Warning)
                    {
                        <WarningIcon Style="position: absolute; top: 1em; right: 1em;"/>
                    }
                }
                @if (!string.IsNullOrEmpty(cardListItem.ImageLocation))
                {
                    <RadzenImage Path=@(cardListItem.ImageLocation) Class="float-left mr-3" Style="width: 80px; height: 80px; margin-right: 1em;"/>
                }
                <div style="width: 100%;">
                    @if (!string.IsNullOrEmpty(cardListItem.Header))
                    {
                        <h4 class="mb-0">@cardListItem.Header</h4>
                    }
                    @foreach (var property in cardListItem.Properties ?? Array.Empty<CardListItemProperty>())
                    {
                        if (!string.IsNullOrEmpty(property?.Value))
                        {
                            var namePart = property.Name != null ? $"{property.Name}: " : string.Empty;
                            var valueStyle = property.ValueColor != null ? $"color: {property.ValueColor}" : string.Empty;
                            <div style="font-size: .8em">
                                <text style="font-weight: bold;">
                                    @namePart
                                </text>
                                <text style="@valueStyle">
                                    @if (!string.IsNullOrEmpty(property.Link))
                                    {
                                        <RadzenLink Icon="open_in_new" Path="@property.Value" Text="@property.Value" Target="_blank"/>
                                    }
                                    else
                                    {
                                        @property.Value
                                    }
                                </text>
                            </div>
                        }
                    }
                    <div>
                        @foreach (var badge in cardListItem.Badges ?? Array.Empty<CardListItemBadge>())
                        {
                            if (!string.IsNullOrEmpty(badge?.Text))
                            {
                                <RadzenBadge BadgeStyle="@badge.Style" IsPill="true" Text="@badge.Text"/>
                            }
                        }
                    </div>
                    <div class="d-flex flex-row align-items-center justify-content-end">
                        @foreach (var button in cardListItem.Buttons ?? Array.Empty<CardListItemButton>())
                        {
                            if (!string.IsNullOrEmpty(button?.Name) || !string.IsNullOrEmpty(button?.Icon))
                            {
                                <RadzenButton Text="@button.Name" Icon="@button.Icon" Click="@button.Action" ButtonStyle="@button.Style"
                                              Disabled="SelectedItems == null || !SelectedItems.Contains(cardListItem.Id)"/>
                            }
                        }
                    </div>
                </div>
            </div>
        </RadzenCard>
    </Template>
</RadzenDataList>
